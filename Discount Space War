entityTypes = {
	projectile:[
		{name:"Basic Bullet",damage:5,speed:3,size:4,time:120},
	],
	module:[
		{name:"Small\nThruster",width:25,height:25,power:1},
	],
	weapon:[
		{
			name:"Basic Turret",
			damage:5,reload:60,
			projectile:[0],set:[0],
			recoil:2,class:0,
		},{
			name:"Basic Cannon",
			damage:5,reload:60,
			projectile:[0],set:[0],
			recoil:2,class:1,
		},
	],
	ship:[
		{
			name:"Scrap Metal",
			pieces:[[0,0,0,0,50,50],[-37.5,-12.5,0,0,25,25],[-37.5,12.5,0,0,25,25],[37.5,-12.5,0,0,25,25],[37.5,12.5,0,0,25,25],[-12.5,-37.5,0,0,25,25],[-12.5,37.5,0,0,25,25],[12.5,-37.5,0,0,25,25],[12.5,37.5,0,0,25,25]],
			modules:[],
			weapons:[],
			color:[[55,55,55],[40,40,40],[0,0,0],[0,0,0]],
			life:50,
			zones:[[0,0,50]],
		},{
			name:"Large Scrap Metal",
			pieces:[[0,0,0,0,100,100],[-75,-25,0,0,50,50],[-75,25,0,0,50,50],[-25,-75,0,0,50,50],[25,-75,0,0,50,50],[75,-25,0,0,50,50],[75,25,0,0,50,50],[-25,75,0,0,50,50],[25,75,0,0,50,50],[-62.5,-62.5,0,0,25,25],[62.5,-62.5,0,0,25,25],[-62.5,62.5,0,0,25,25],[62.5,62.5,0,0,25,25]],
			modules:[],
			weapons:[],
			color:[[55,55,55],[40,40,40],[0,0,0],[0,0,0]],
			life:200,
			zones:[[0,0,100]],
		},{
			name:"Spoke",
			pieces:[[0,0,0,0,25,25],[-25,0,1,90,25,25],[25,0,1,180,25,25],[0,-25,2,180,25,25]],
			modules:[[0,25,0,0]],
			weapons:[[0,0,0,0,0,0]],
			color:[[85,130,85],[60,100,60],[155,215,155],[125,175,125]],
			life:10,
			zones:[[0,0,25]],
		},
	],
};
stage = {scene:0,focus:{x:0,y:0}};
inputs = {keys:[false,false,false,false,false],specialKeys:[false,false,false,false],mouse:{x:0,y:0}};
entities = {projectiles:[],ships:[],particles:[]};
runOrder = {fore:[entities.projectiles,entities.ships,entities.particles]};
graphics = {full:0};
transition = {anim:0,trigger:false,scene:stage.scene};
a=0;b=0;c=0;d=0;e=0;f=0;g=0;h=0;i=0;j=0;k=0;l=0;
function setupLayer(layer){
	layer.angleMode(DEGREES);
	layer.textAlign(CENTER,CENTER);
	layer.rectMode(CENTER);
	layer.colorMode(RGB,255,255,255,1);
	layer.strokeJoin(BEVEL);
}
function displayTransition(layer,transition){
	layer.noStroke();
	layer.fill(0);
	layer.rect(transition.anim*width/4,height/2,transition.anim*width/2,height);
	layer.rect(width-transition.anim*width/4,height/2,transition.anim*width/2,height);
	layer.rect(width/2,transition.anim*height/4,width,transition.anim*height/2);
	layer.rect(width/2,height-transition.anim*height/4,width,transition.anim*height/2);
	if(transition.trigger){
		transition.anim+=0.1;
		if(transition.anim>=1){
			transition.trigger = false;
			stage.scene = transition.scene;
		}
	}
	else if(transition.anim>0){
		transition.anim-=0.1;
	}
}
class entity{
	constructor(layer,x,y,type,direction){
		this.layer = layer;
		this.position = {x:x,y:y};
		this.type = type;
		this.direction = direction;
		this.fade = 0;
		this.remove = 0;
		this.time = 0;
	}
	update(){
		this.time++;
		for(e=0;e<this.timers.length;e++){
			if(this.timers[e]>0){
				this.timers[e]--;
			}
		}
	}
}
class particle extends entity{
	constructor(layer,x,y,type,direction,color){
		super(layer,x,y,type,direction);
		this.color = color;
		switch(this.type){
			case 0:
				this.fade = 1;
				this.sizing = 0;
			break;
		}
	}
	display(){
		this.layer.translate(this.position.x,this.position.y);
		this.layer.rotate(this.direction);
		this.layer.scale(this.size*this.sizing);
		this.layer.noStroke();
		this.layer.noFill();
		switch(this.type){
			case 0:
				this.layer.fill(this.color[0][0],this.color[0][1],this.color[0][2],this.fade);
				this.layer.ellipse(0,0,10,10);
				this.layer.fill(this.color[1][0],this.color[1][1],this.color[1][2],this.fade);
				this.layer.ellipse(0,0,6,6);
			break;
		}
		this.layer.scale(1/this.size/this.sizing);
		this.layer.rotate(-this.direction);
		this.layer.translate(-this.position.x,-this.position.y);
	}
	update(){
		super.update();
		switch(this.type){
			case 0:
				this.sizing+=0.01;
				this.fade-=0.01;
			break;
		}
	}
}
class projectile extends entity{
	constructor(layer,x,y,type,direction,color){
		super(layer,x,y,type,direction);
		this.color = color;
		this.name = entityTypes.projectile[this.type].name;
		this.damage = entityTypes.projectile[this.type].damage;
		this.speed = entityTypes.projectile[this.type].speed;
		this.size = entityTypes.projectile[this.type].size;
		this.timers = [entityTypes.projectile[this.type].time];
		this.hit = false;
	}
	display(){
		this.layer.translate(this.position.x,this.position.y);
		this.layer.rotate(this.direction);
		this.layer.scale(this.size/10);
		this.layer.fill(this.color[0][0],this.color[0][1],this.color[0][2],this.fade);
		this.layer.stroke(this.color[1][0],this.color[1][1],this.color[1][2],this.fade);
		this.layer.strokeWeight(2);
		switch(this.type){
			case 0:
				this.layer.ellipse(0,0,8,8);
			break
		}
		this.layer.scale(10/this.size);
		this.layer.rotate(-this.direction);
		this.layer.translate(-this.position.x,-this.position.y);
	}
	update(){
		super.update();
		this.position.x+=sin(this.direction)*this.speed;
		this.position.y-=cos(this.direction)*this.speed;
		if(this.fade<1&&!this.hit){
			this.fade = round(this.fade*10+1)/10;
		}
		if(this.fade>0&&this.hit){
			this.fade = round(this.fade*10-1)/10;
		}
		if(this.timers[0]<=0){
			this.hit = true;
		}
		if(!this.hit){
			for(e=0;e<entities.ships.length;e++){
				
			}
		}
	}
}
class piece extends entity{
	constructor(layer,x,y,type,direction,width,height,color){
		super(layer,x,y,type,direction);
		this.width = width;
		this.height = height;
		this.color = color;
		this.timers = [];
	}
	display(){
		this.layer.translate(this.position.x,this.position.y);
		this.layer.rotate(this.direction);
		this.layer.fill(this.color[0][0],this.color[0][1],this.color[0][2],this.fade);
		this.layer.stroke(this.color[1][0],this.color[1][1],this.color[1][2],this.fade);
		this.layer.strokeWeight(3);
		switch(this.type){
			case 0:
				this.layer.rect(0,0,this.width,this.height);
			break;
			case 1:
				this.layer.triangle(-this.width/2,-this.height/2,this.width/2,this.height/2,this.width/2,-this.height/2);
			break;
			case 2:
				this.layer.triangle(-this.width/2,-this.height/2,this.width/2,-this.height/2,0,this.height/2);
			break;
		}
		this.layer.rotate(-this.direction);
		this.layer.translate(-this.position.x,-this.position.y);
	}
	update(){
		if(this.fade<1){
			this.fade+=0.1;
		}
	}
}
class module extends entity{
	constructor(layer,x,y,type,direction,color){
		super(layer,x,y,type,direction);
		this.width = width;
		this.height = height;
		this.color = color;
		this.name = entityTypes.module[this.type].name;
		this.width = entityTypes.module[this.type].width;
		this.height = entityTypes.module[this.type].height;
		this.power = entityTypes.module[this.type].power;
		this.timers = [];
	}
	display(){
		this.layer.translate(this.position.x,this.position.y);
		this.layer.rotate(this.direction);
		switch(this.type){
			case 0:
			break;
		}
		this.layer.fill(this.color[0][0]*4/5,this.color[0][1]*4/5,this.color[0][2]*4/5,this.fade);
		this.layer.stroke(this.color[1][0]*4/5,this.color[1][1]*4/5,this.color[1][2]*4/5,this.fade);
		this.layer.strokeWeight(3);
		switch(this.type){
			case 0:
				this.layer.strokeWeight(4);
				this.layer.quad(-7.5,-12.5,7.5,-12.5,11,5,-11,5);
			break;
		}
		this.layer.rotate(-this.direction);
		this.layer.translate(-this.position.x,-this.position.y);
	}
	update(){
		if(this.fade<1){
			this.fade+=0.1;
		}
	}
}
class weapon extends entity{
	constructor(layer,x,y,type,direction,level,vision,team,color){
		super(layer,x,y,type,direction);
		this.team = team;
		this.color = color;
		this.level = level;
		this.vision = vision;
		this.name = entityTypes.weapon[this.type].name;
		this.damage = entityTypes.weapon[this.type].damage;
		this.reload = entityTypes.weapon[this.type].reload;
		this.projectile = entityTypes.weapon[this.type].projectile;
		this.set = entityTypes.weapon[this.type].set;
		this.class = entityTypes.weapon[this.type].class;
		this.recoil = {value:entityTypes.weapon[this.type].recoil,back:[[],[],[],[],[],[],[]],timer:[0,0,0,0,0,0,0,0]};
		this.timers = [this.reload];
	}
	display(){
		this.layer.translate(this.position.x,this.position.y);
		this.layer.rotate(this.direction);
		switch(this.name){
			case "Basic Turret":
				this.layer.fill(100,this.fade);
				this.layer.stroke(80,this.fade);
				this.layer.strokeWeight(3);
				this.layer.rect(0,-12+this.recoil.back[0],10,20);
				this.layer.ellipse(0,0,20,20);
			break;
			case "Basic Cannon":
				this.layer.fill(100,this.fade);
				this.layer.stroke(80,this.fade);
				this.layer.strokeWeight(3);
				this.layer.rect(0,-8+this.recoil.back[0],10,20);
				this.layer.rect(0,0,20,10);
			break;
		}
		this.layer.rotate(-this.direction);
		this.layer.translate(-this.position.x,-this.position.y);
	}
	update(){
		if(this.fade<1){
			this.fade+=0.1;
		}
	}
}
class ship extends entity{
	constructor(layer,x,y,type,direction,player){
		super(layer,x,y,type,direction);
		this.player = player;
		this.life = entityTypes.ship[this.type].life;
		this.color = entityTypes.ship[this.type].color;
		this.entities = {pieces:[],modules:[],weapons:[]};
		this.genParts();
		this.move = {activation:0,turn:0};
		this.runOrder = [this.entities.pieces,this.entities.modules,this.entities.weapons];
		this.timers = [];
	}
	display(){
		this.layer.translate(this.position.x,this.position.y);
		this.layer.rotate(this.direction);
		for(e=0;e<this.runOrder.length;e++){
			for(f=0;f<this.runOrder[e].length;f++){
				this.runOrder[e][f].display();
			}
		}
		this.layer.rotate(-this.direction);
		this.layer.translate(-this.position.x,-this.position.y);
	}
	update(){
		if(this.player){
			stage.focus = this.position;
			if((inputs.keys[0]||inputs.specialKeys[0])&&this.move.turn>-1){
				this.move.turn-=1/15;
			}
			if((inputs.keys[1]||inputs.specialKeys[1])&&this.move.turn<1){
				this.move.turn+=1/15;
			}
			if((inputs.keys[2]||inputs.specialKeys[2])&&this.move.activation<1){
				this.move.activation+=1/30;
			}
			if((inputs.keys[3]||inputs.specialKeys[3])&&this.move.activation>0){
				this.move.activation-=1/30;
			}
		}
		else{
			if(this.move.activation<0){
				this.move.activation+=1/30;
			}
		}
		this.move.activation = constrain(this.move.activation,0,1);
		this.move.turn = constrain(this.move.turn,0,1);
		this.position.x+=sin(this.direction)*this.move.activation;
		this.position.y-=cos(this.direction)*this.move.activation;
		this.direction+=this.move.turn;
		for(e=0;e<this.runOrder.length;e++){
			for(f=0;f<this.runOrder[e].length;f++){
				this.runOrder[e][f].update();
				if(this.runOrder[e][f].remove){
					this.runOrder[e].splice(f,1);
					f--;
				}
			}
		}
	}
	genParts(){
		for(e=0;e<entityTypes.ship[this.type].pieces.length;e++){
			this.entities.pieces.push(new piece(this.layer,entityTypes.ship[this.type].pieces[e][0],entityTypes.ship[this.type].pieces[e][1],entityTypes.ship[this.type].pieces[e][2],entityTypes.ship[this.type].pieces[e][3],entityTypes.ship[this.type].pieces[e][4],entityTypes.ship[this.type].pieces[e][5],this.color));
		}
		for(e=0;e<entityTypes.ship[this.type].modules.length;e++){
			this.entities.modules.push(new module(this.layer,entityTypes.ship[this.type].modules[e][0],entityTypes.ship[this.type].modules[e][1],entityTypes.ship[this.type].modules[e][2],entityTypes.ship[this.type].modules[e][3],this.color));
		}
		for(e=0;e<entityTypes.ship[this.type].weapons.length;e++){
			this.entities.weapons.push(new weapon(this.layer,entityTypes.ship[this.type].weapons[e][0],entityTypes.ship[this.type].weapons[e][1],entityTypes.ship[this.type].weapons[e][2],entityTypes.ship[this.type].weapons[e][3],entityTypes.ship[this.type].weapons[e][4],entityTypes.ship[this.type].weapons[e][5],this.team,this.color));
		}
	}
}
function setup(){
	createCanvas(800,600);
	angleMode(DEGREES);
	textAlign(CENTER,CENTER);
	rectMode(CENTER);
	strokeJoin(BEVEL);
	colorMode(RGB,255,255,255,1);
	graphics.full = createGraphics(800,600);
	setupLayer(graphics.full);
	entities.ships.push(new ship(graphics.full,0,0,2,0,true));
	entities.ships.push(new ship(graphics.full,100,0,2,0,false));
}
keyPressed = function(){
	if(key == "a"||key == "A"){
  	inputs.keys[0] = true;
	}
	if(key == "d"||key == "D"){
  	inputs.keys[1] = true;
	}
	if(key == "w"||key == "W"){
  	inputs.keys[2] = true;
	}
	if(key == "s"||key == "S"){
  	inputs.keys[3] = true;
	}
	if(keyCode == LEFT_ARROW){
    inputs.specialKeys[0] = true;
  }
  if(keyCode == RIGHT_ARROW){
    inputs.specialKeys[1] = true;
  }
  if(keyCode == UP_ARROW){
    inputs.specialKeys[2] = true;
	}
  if(keyCode == DOWN_ARROW){
    inputs.specialKeys[3] = true;
  }
}
keyReleased = function(){
	if(key == "a"||key == "A"){
  	inputs.keys[0] = false;
	}
	if(key == "d"||key == "D"){
  	inputs.keys[1] = false;
	}
	if(key == "w"||key == "W"){
  	inputs.keys[2] = false;
	}
	if(key == "s"||key == "S"){
  	inputs.keys[3] = false;
	}
	if(keyCode == LEFT_ARROW){
    inputs.specialKeys[0] = false;
  }
  if(keyCode == RIGHT_ARROW){
    inputs.specialKeys[1] = false;
  }
  if(keyCode == UP_ARROW){
    inputs.specialKeys[2] = false;
  }
  if(keyCode == DOWN_ARROW){
    inputs.specialKeys[3] = false;
  }
}
function draw(){
	switch(stage.scene){
		case 0:
			graphics.full.background(0);
			graphics.full.push();
			graphics.full.translate(graphics.full.width/2-stage.focus.x,graphics.full.height/2-stage.focus.y);
			for(a=0;a<runOrder.fore.length;a++){
				for(b=0;b<runOrder.fore[a].length;b++){
					runOrder.fore[a][b].display();
					runOrder.fore[a][b].update();
					if(runOrder.fore[a][b].remove){
						runOrder.fore[a].splice(b,1);
						b--;
					}
				}
			}
			graphics.full.translate(stage.focus.x-graphics.full.width/2,stage.focus.y-graphics.full.height/2);
			graphics.full.pop();
		break;
	}
	image(graphics.full,0,0);
	inputs.mouse.x = mouseX;
	inputs.mouse.y = mouseY;
}
