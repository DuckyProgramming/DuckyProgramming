draw = function(){
	background(0);
	applyMatrix();
	translate(300,300);
	if(skillTechnology[0].owned){
		scale(5/6);
	}
	if(skillTechnology[1].owned){
		scale(6/7);
	}
	translate(-player.x+zoomPosition[0],-player.y+zoomPosition[1]);
	for(i=0;i<particles2.length;i++){
		particles2[i].draw();
		particles2[i].update();
		if(particles2[i].remove){
			particles2.splice(i,1);
			i--;
		}
	}
	for(var i=0;i<projectiles2.length;i++){
		projectiles2[i].draw();
		projectiles2[i].update();
		if(projectiles2[i].remove){
			projectiles2.splice(i,1);
			i--;
		}
	}
	for(i in ships){
		ships[i].draw1();
	}
	player.draw1();
	for(i=0;i<projectiles.length;i++){
		projectiles[i].draw();
		projectiles[i].update();
		if(projectiles[i].remove){
			projectiles.splice(i,1);
			i--;
		}
	}
	for(i=0;i<ships.length;i++){
		ships[i].draw2();
		ships[i].update();
		if(ships[i].remove){
			ships.splice(i,1);
			i--;
		}
	}
	player.draw2();
	for(i=0;i<particles.length;i++){
		particles[i].draw();
		particles[i].update();
		if(particles[i].remove){
			particles.splice(i,1);
			i--;
		}
	}
	for(i in ships){
		ships[i].drawLife();
	}
	player.drawLife();
	player.update();
	if(skillTechnology[2].owned){
		if(zoomPositionGoal[0] !== 0||zoomPositionGoal[1] !== 0){
			zoomPositionGoal[0]+=(player.x-player.holdX);
			zoomPositionGoal[1]+=(player.y-player.holdY);
		}
		if(dist(zoomPositionGoal[0],zoomPositionGoal[1],zoomPosition[0],zoomPosition[1])<5){
			zoomPosition[0] = zoomPositionGoal[0];
			zoomPosition[1] = zoomPositionGoal[1];
		}
		else{
			zoomingDirection = atan2(zoomPositionGoal[0]-zoomPosition[0],zoomPositionGoal[1]-zoomPosition[1]);
			zoomPosition[0]+=sin(zoomingDirection)*10;
			zoomPosition[1]+=cos(zoomingDirection)*10;
		}
	}
	translate(player.x-zoomPosition[0],player.y-zoomPosition[1]);
	if(skillTechnology[1].owned){
		scale(7/6);
	}
	if(skillTechnology[0].owned){
		scale(6/5);
	}
	translate(-300,-300);
	resetMatrix();
	fill(200);
	stroke(100);
	strokeWeight(5);
	if(skillTechnology[3].owned){
		rect(5,5,70,20);
	}
	if(skillTechnology[4].owned){
		rect(85,5,70,20);
	}
	fill(0);
	noStroke();
	textSize(10);
	if(skillTechnology[3].owned){
		text(round(player.direction*10)/10+"Â°",40,15);
	}
	if(skillTechnology[4].owned){
		text(round(player.speed*200)/100+" AU/PY",120,15);
	}
	if(editorOpen){
		player.firing = true;
		if(editorOpenAnim[0]<100){
			editorOpenAnim[0]+=5;
		}
		for(i=0;i<5;i++){
			if(editorOpenAnim[1+i]<100&&editorTab === i&&(editorOpenAnim[1] === 0||i === 0)&&(editorOpenAnim[2] === 0||i === 1)&&(editorOpenAnim[3] === 0||i === 2)&&(editorOpenAnim[4] === 0||i === 3)&&(editorOpenAnim[5] === 0||i === 4)){
				editorOpenAnim[1+i]+=10;
			}
			if(editorOpenAnim[1+i]>0&&!(editorTab === i&&(editorOpenAnim[1] === 0||i === 0)&&(editorOpenAnim[2] === 0||i === 1)&&(editorOpenAnim[3] === 0||i === 2)&&(editorOpenAnim[4] === 0||i === 3)&&(editorOpenAnim[5] === 0||i === 4))){
				editorOpenAnim[1+i]-=10;
			}
		}
	}
	else{
		if(editorOpenAnim[0]>0){
			editorOpenAnim[0]-=5;
		}
		for(i=0;i<5;i++){
			if(editorOpenAnim[1+i]>0){
				editorOpenAnim[1+i]-=10;
			}
		}
	}
	noStroke();
	for(i=0;i<5;i++){
		fill(135);
		rect(600-editorOpenAnim[i+1],0,100,600);
		if(i === editorTab&&editorTabAnim[i]<50){
			editorTabAnim[i]+=2;
		}
		else if(i !== editorTab&&editorTabAnim[i]>40){
			editorTabAnim[i]-=2;
		}
		fill(15+editorTabAnim[i]*3);
		rect(105+i*80,-120+editorOpenAnim[0],70,editorTabAnim[i]+20,10);
		fill(0);
		textSize(18);
		text(editorTabNames[i],140+i*80,-120+editorOpenAnim[0]+editorTabAnim[i]);
	}
	fill(205);
	rect(610-editorOpenAnim[2]-editorOpenAnim[3]-editorOpenAnim[4]-editorOpenAnim[5],10,80,30,5);
	rect(610-editorOpenAnim[2]-editorOpenAnim[3]-editorOpenAnim[4]-editorOpenAnim[5],210,80,30,5);
	rect(635-editorOpenAnim[2]-editorOpenAnim[3]-editorOpenAnim[4]-editorOpenAnim[5],400,30,30,5);
	rect(605-editorOpenAnim[2]-editorOpenAnim[3]-editorOpenAnim[4]-editorOpenAnim[5],370,30,30,5);
	rect(665-editorOpenAnim[2]-editorOpenAnim[3]-editorOpenAnim[4]-editorOpenAnim[5],370,30,30,5);
	rect(635-editorOpenAnim[2]-editorOpenAnim[3]-editorOpenAnim[4]-editorOpenAnim[5],340,30,30,5);
	for(i=0;i<4;i++){
		if(!(editorOpenAnim[3]>0&&i>=2)&&!(editorOpenAnim[5]>0&&i>=1)){
			rect(630-editorOpenAnim[2]-editorOpenAnim[3]-editorOpenAnim[4]-editorOpenAnim[5],60+i*40,40,20,5);
			rect(605-editorOpenAnim[2]-editorOpenAnim[3]-editorOpenAnim[4]-editorOpenAnim[5],60+i*40,20,20,5);
			rect(675-editorOpenAnim[2]-editorOpenAnim[3]-editorOpenAnim[4]-editorOpenAnim[5],60+i*40,20,20,5);
			rect(630-editorOpenAnim[2]-editorOpenAnim[3]-editorOpenAnim[4]-editorOpenAnim[5],450+i*40,40,20,5);
			rect(605-editorOpenAnim[2]-editorOpenAnim[3]-editorOpenAnim[4]-editorOpenAnim[5],450+i*40,20,20,5);
			rect(675-editorOpenAnim[2]-editorOpenAnim[3]-editorOpenAnim[4]-editorOpenAnim[5],450+i*40,20,20,5);
		}
	}
	rect(610-editorOpenAnim[1],70,80,30,5);
	rect(610-editorOpenAnim[1],160,80,30,5);
	for(i=0;i<2;i++){
		rect(630-editorOpenAnim[1],260+i*40,40,20,5);
		rect(605-editorOpenAnim[1],260+i*40,20,20,5);
		rect(675-editorOpenAnim[1],260+i*40,20,20,5);
	}
	if(editorTyping){
		fill(150,250,150);
	}
	rect(610-editorOpenAnim[1],120,80,30,5);
	fill(0);
	triangle(640-editorOpenAnim[2]-editorOpenAnim[3]-editorOpenAnim[4]-editorOpenAnim[5],363,660-editorOpenAnim[2]-editorOpenAnim[3]-editorOpenAnim[4]-editorOpenAnim[5],363,650-editorOpenAnim[2]-editorOpenAnim[3]-editorOpenAnim[4]-editorOpenAnim[5],345);
	triangle(640-editorOpenAnim[2]-editorOpenAnim[3]-editorOpenAnim[4]-editorOpenAnim[5],407,660-editorOpenAnim[2]-editorOpenAnim[3]-editorOpenAnim[4]-editorOpenAnim[5],407,650-editorOpenAnim[2]-editorOpenAnim[3]-editorOpenAnim[4]-editorOpenAnim[5],425);
	triangle(628-editorOpenAnim[2]-editorOpenAnim[3]-editorOpenAnim[4]-editorOpenAnim[5],375,628-editorOpenAnim[2]-editorOpenAnim[3]-editorOpenAnim[4]-editorOpenAnim[5],395,610-editorOpenAnim[2]-editorOpenAnim[3]-editorOpenAnim[4]-editorOpenAnim[5],385);
	triangle(672-editorOpenAnim[2]-editorOpenAnim[3]-editorOpenAnim[4]-editorOpenAnim[5],375,672-editorOpenAnim[2]-editorOpenAnim[3]-editorOpenAnim[4]-editorOpenAnim[5],395,690-editorOpenAnim[2]-editorOpenAnim[3]-editorOpenAnim[4]-editorOpenAnim[5],385);
	for(i=0;i<4;i++){
		if(!(editorOpenAnim[3]>0&&i>=2)&&!(editorOpenAnim[5]>0&&i>=1)){
			triangle(610-editorOpenAnim[2]-editorOpenAnim[3]-editorOpenAnim[4]-editorOpenAnim[5],74+i*40,620-editorOpenAnim[2]-editorOpenAnim[3]-editorOpenAnim[4]-editorOpenAnim[5],74+i*40,615-editorOpenAnim[2]-editorOpenAnim[3]-editorOpenAnim[4]-editorOpenAnim[5],65+i*40);
			triangle(680-editorOpenAnim[2]-editorOpenAnim[3]-editorOpenAnim[4]-editorOpenAnim[5],66+i*40,690-editorOpenAnim[2]-editorOpenAnim[3]-editorOpenAnim[4]-editorOpenAnim[5],66+i*40,685-editorOpenAnim[2]-editorOpenAnim[3]-editorOpenAnim[4]-editorOpenAnim[5],75+i*40);
			triangle(610-editorOpenAnim[2]-editorOpenAnim[3]-editorOpenAnim[4]-editorOpenAnim[5],464+i*40,620-editorOpenAnim[2]-editorOpenAnim[3]-editorOpenAnim[4]-editorOpenAnim[5],464+i*40,615-editorOpenAnim[2]-editorOpenAnim[3]-editorOpenAnim[4]-editorOpenAnim[5],455+i*40);
			triangle(680-editorOpenAnim[2]-editorOpenAnim[3]-editorOpenAnim[4]-editorOpenAnim[5],456+i*40,690-editorOpenAnim[2]-editorOpenAnim[3]-editorOpenAnim[4]-editorOpenAnim[5],456+i*40,685-editorOpenAnim[2]-editorOpenAnim[3]-editorOpenAnim[4]-editorOpenAnim[5],465+i*40);
		}
	}
	triangle(610-editorOpenAnim[1],274,620-editorOpenAnim[1],274,615-editorOpenAnim[1],265);
	triangle(680-editorOpenAnim[1],266,690-editorOpenAnim[1],266,685-editorOpenAnim[1],275);
	triangle(610-editorOpenAnim[1],314,620-editorOpenAnim[1],314,615-editorOpenAnim[1],305);
	triangle(680-editorOpenAnim[1],306,690-editorOpenAnim[1],306,685-editorOpenAnim[1],315);
	textSize(14);
	text("Export",650-editorOpenAnim[1],85);
	text("Clear",650-editorOpenAnim[1],175);
	text("Add Zone",650-editorOpenAnim[5],25);
	text("Add Weapon",650-editorOpenAnim[4],25);
	text("Add Module",650-editorOpenAnim[3],25);
	text("Add Piece",650-editorOpenAnim[2],25);
	text("Delete",650-editorOpenAnim[2]-editorOpenAnim[3]-editorOpenAnim[4]-editorOpenAnim[5],225);
	textSize(12);
	text("Position",650-editorOpenAnim[2]-editorOpenAnim[3]-editorOpenAnim[4],330);
	text("Type",650-editorOpenAnim[3]-editorOpenAnim[4],480);
	text("Add Type",650-editorOpenAnim[3]-editorOpenAnim[4],90);
	text("Add Variable A",650-editorOpenAnim[4],130);
	text("Variable A",650-editorOpenAnim[4],520);
	text("Add Layer",650-editorOpenAnim[4],170);
	text("Layer",650-editorOpenAnim[4],560);
	text("Shape",650-editorOpenAnim[2],480);
	text("Width",650-editorOpenAnim[2],520);
	text("Height",650-editorOpenAnim[2],560);
	text("Add Shape",650-editorOpenAnim[2],90);
	text("Add Width",650-editorOpenAnim[2],130);
	text("Add Height",650-editorOpenAnim[2],170);
	text("Radius",650-editorOpenAnim[5],440);
	text("Add Radius",650-editorOpenAnim[5],50);
	text("Name",650-editorOpenAnim[1],110);
	text("Direction",650-editorOpenAnim[2]-editorOpenAnim[3]-editorOpenAnim[4],440);
	text("Add Direction",650-editorOpenAnim[2]-editorOpenAnim[3]-editorOpenAnim[4],50);
	if(editorTab === 1||editorSelect === 0&&player.pieces.length>0){
		text(player.pieces[editorSelect].direction,650-editorOpenAnim[2],460);
		if(player.pieces[editorSelect].direction%180 === 0){
			text(player.pieces[editorSelect].width,650-editorOpenAnim[2],540);
			text(player.pieces[editorSelect].height,650-editorOpenAnim[2],580);
		}
		else{
			text(player.pieces[editorSelect].height,650-editorOpenAnim[2],540);
			text(player.pieces[editorSelect].width,650-editorOpenAnim[2],580);
		}
	}
	if((editorTab === 2||editorSelect === 0)&&player.modules.length>0){
		text(player.modules[editorSelect].direction,650-editorOpenAnim[3],460);
	}
	if(editorTab === 3||editorSelect === 0){
		if(editorSelect>=player.weapons.length&&editorSelect>=player.lowerWeapons.length&&editorSelect>0){
			editorSelect = max(0,max(player.weapons.length,player.lowerWeapons.length));
		} else if(editorSelect>=player.weapons.length){
			editorWeaponLevel = 1;
		}
		else if(editorSelect>=player.lowerWeapons.length){
			editorWeaponLevel = 0;
		}
		if(editorWeaponLevel === 0&&player.weapons.length>0){
			text(round(player.weapons[editorSelect].direction),650-editorOpenAnim[4],460);
		}
		else if(player.lowerWeapons.length>0){
			text(round(player.lowerWeapons[editorSelect].direction),650-editorOpenAnim[4],460);
		}
	}
	if((editorTab === 4||editorSelect === 0)&&player.hitBoxes.length>0){
		text(player.hitBoxes[editorSelect][2],650-editorOpenAnim[5],460);
	}
	text(editorCreate[0],650-editorOpenAnim[2]-editorOpenAnim[3]-editorOpenAnim[4]-editorOpenAnim[5],70);
	if(editorCreate[0]%180 === 0){
		text(editorCreate[2],650-editorOpenAnim[2],150);
		text(editorCreate[3],650-editorOpenAnim[2],190);
	}
	else{
		text(editorCreate[3],650-editorOpenAnim[2],150);
		text(editorCreate[2],650-editorOpenAnim[2],190);
	}
	text(editorCreate[2],650-editorOpenAnim[4],150);
	if(editorCreate[3] === 0){
		text("Top",650-editorOpenAnim[4],190);
	}
	else{
		text("Side",650-editorOpenAnim[4],190);
	}
	text("Behaviour",650-editorOpenAnim[1],250);
	text("Life",650-editorOpenAnim[1],290);
	text("Main Color",650-editorOpenAnim[1],332);
	text("Outer Color",650-editorOpenAnim[1],402);
	text("Bullet Color",650-editorOpenAnim[1],472);
	text("Bullet Outer Color",650-editorOpenAnim[1],542);
	text(player.maxLife,650-editorOpenAnim[1],310);
	text("Pieces: "+player.pieces.length,650-editorOpenAnim[1],15);
	text("Modules:"+player.modules.length,650-editorOpenAnim[1],30);
	text("Top Weapons:"+player.weapons.length,650-editorOpenAnim[1],45);
	text("Side Weapons:"+player.lowerWeapons.length,650-editorOpenAnim[1],60);
	textSize(8);
	text(editorTypeAll[editorTypeAll.length-1],650-editorOpenAnim[1],135);
	text(behaviours[player.behaviour],650-editorOpenAnim[1],270);
	if(editorTab === 1||editorCreate[1] === 0&&editorSelect === 0&&player.pieces.length>0){
		text(pieceTypes[player.pieces[editorSelect].type].name,650-editorOpenAnim[2],500);
		text(pieceTypes[editorCreate[1]].name,650-editorOpenAnim[2],110);
	}
	if((editorTab === 2||editorCreate[1] === 0&&editorSelect === 0)&&player.modules.length>0){
		text(moduleTypes[player.modules[editorSelect].type].name,650-editorOpenAnim[3],500);
		text(moduleTypes[editorCreate[1]].name,650-editorOpenAnim[3],110);
	}
	if(editorTab === 3||editorSelect === 0&&player.weapons.length>0&&player.lowerWeapons.length>0){
		text(weaponTypes[editorCreate[1]].name,650-editorOpenAnim[4],110);
		if(editorWeaponLevel === 0&&player.weapons.length>0){
			text(weaponTypes[player.weapons[editorSelect].type].name,650-editorOpenAnim[4],500);
			textSize(12);
			text(player.weapons[editorSelect].variable1,650-editorOpenAnim[4],540);
			if(player.weapons[editorSelect].level === 0){
				text("Top",650-editorOpenAnim[4],580);
			}
			else{
				text("Side",650-editorOpenAnim[4],580);
			}
		}
		else if(editorWeaponLevel === 1&&player.lowerWeapons.length>0){
			text(weaponTypes[player.lowerWeapons[editorSelect].type].name,650-editorOpenAnim[4],500);
			textSize(12);
			text(player.lowerWeapons[editorSelect].variable1,650-editorOpenAnim[4],540);
			if(player.lowerWeapons[editorSelect].level === 0){
				text("Top",650-editorOpenAnim[4],580);
			}
			else{
				text("Side",650-editorOpenAnim[4],580);
			}
		}
	}
	stroke(0);
	strokeWeight(3);
	for(i=0;i<3;i++){
		line(610-editorOpenAnim[1],350+i*15,690-editorOpenAnim[1],350+i*15);
		line(610-editorOpenAnim[1],420+i*15,690-editorOpenAnim[1],420+i*15);
		line(610-editorOpenAnim[1],490+i*15,690-editorOpenAnim[1],490+i*15);
		line(610-editorOpenAnim[1],560+i*15,690-editorOpenAnim[1],560+i*15);
	}
	strokeWeight(7);
	for(i=0;i<3;i++){
		point(610-editorOpenAnim[1]+player.color[i]*80/255,350+i*15);
		point(610-editorOpenAnim[1]+player.strokeColor[i]*80/255,420+i*15);
		point(610-editorOpenAnim[1]+player.weaponColor[i]*80/255,490+i*15);
		point(610-editorOpenAnim[1]+player.weaponStrokeColor[i]*80/255,560+i*15);
	}
	if(editorOpen&&editorTab === 4){
		stroke(255,0,0);
		strokeWeight(2);
		fill(255,0,0,50);
		for(i=0;i<player.hitBoxes.length;i++){
			if(i !== editorSelect){
				ellipse(player.hitBoxes[i][0]+300,player.hitBoxes[i][1]+300,player.hitBoxes[i][2]*2,player.hitBoxes[i][2]*2);
			}
		}
		if(editorDragging){
			stroke(0,150,255);
			fill(0,150,255,50);
			player.hitBoxes[editorSelect][0] = round((mouseX-editorDragOffset[0])/6.25)*6.25;
			player.hitBoxes[editorSelect][1] = round((mouseY-editorDragOffset[1])/6.25)*6.25;
		}
		else{
			stroke(0,255,150);
			fill(0,255,150,50);
		}
		if(player.hitBoxes.length>0){
			ellipse(player.hitBoxes[editorSelect][0]+300,player.hitBoxes[editorSelect][1]+300,player.hitBoxes[editorSelect][2]*2,player.hitBoxes[editorSelect][2]*2);
		}
	}
	if(editorOpen&&editorTab>=1&&editorTab<=3&&!(editorTab === 2&&player.modules.length === 0)&&!(editorTab === 3&&player.weapons.length === 0&&player.lowerWeapons.length === 0)){
		applyMatrix();
		translate(300,300);
		rotate(player.direction);
		if(editorDragging){
			noFill();
			stroke(0,150,255,this.fade);
			strokeWeight(2);
		}
		else{
			noFill();
			stroke(0,255,150,this.fade);
			strokeWeight(2);
		}
		if(editorTab === 1){
			player.pieces[editorSelect].drawSelect();
		}
		else if(editorTab === 2){
			player.modules[editorSelect].drawSelect();
		}
		else if(editorTab === 3){
			if(editorWeaponLevel === 0){
				player.weapons[editorSelect].drawSelect();
			}
			else{
				player.lowerWeapons[editorSelect].drawSelect();
			}
		}
		if(editorDragging){
			if(editorTab === 1){
				player.pieces[editorSelect].x = round((mouseX-editorDragOffset[0])/6.25)*6.25;
				player.pieces[editorSelect].y = round((mouseY-editorDragOffset[1])/6.25)*6.25;
			}
			else if(editorTab === 2){
				player.modules[editorSelect].x = round((mouseX-editorDragOffset[0])/6.25)*6.25;
				player.modules[editorSelect].y = round((mouseY-editorDragOffset[1])/6.25)*6.25;
			}
			else if(editorTab === 3){
				if(editorWeaponLevel === 0){
					player.weapons[editorSelect].x = round((mouseX-editorDragOffset[0])/6.25)*6.25;
					player.weapons[editorSelect].y = round((mouseY-editorDragOffset[1])/6.25)*6.25;
				}
				else{
					player.lowerWeapons[editorSelect].x = round((mouseX-editorDragOffset[0])/6.25)*6.25;
					player.lowerWeapons[editorSelect].y = round((mouseY-editorDragOffset[1])/6.25)*6.25;
				}
			}
		}
		rotate(-player.direction);
		stroke(255,100,100,100);
		strokeWeight(4);
		noFill();
		point(0,0);
		strokeWeight(2);
		ellipse(0,0,200,200);
		ellipse(0,0,400,400);
		translate(-300,-300);
		resetMatrix();
	}
	if(messageFadeBoostTimer>0){
		messageFadeBoostTimer--;
		if(messageFade<255){
			messageFade+=17;
		}
	}
	if(messageFade>0){
		noStroke();
		fill(255,125,0,messageFade/2);
		rect(50,50,500,100,20);
		fill(255,195,0,messageFade/2);
		rect(60,60,480,80,20);
		fill(0,messageFade);
		textSize(40);
		text(message,300,100);
		messageFade--;
	}
	noStroke();
	textSize(10);
	for(i=0;i<messageCache.length;i++){
		messageCache[i][1]-=3;
		fill(255,min(messageCache[i][1],255)/2);
		rect(-10,600-messageCache.length*25+i*25,310,20,3);
		fill(0,messageCache[i][1]);
		text(messageCache[i][0],150,610-messageCache.length*25+i*25);
		if(messageCache[i][1]<=0){
			messageCache.splice(i,1);
			i--;
		}
	}
	if(player.life<=0){
		if(deathMessage === 0){
			deathMessage = deathMessages[floor(random(0,deathMessages.length))];
		}
		if(deathFade<255){
			deathFade++;
		}
		fill(230,0,0,deathFade);
		noStroke();
		rect(0,0,600,600);
		fill(0,deathFade);
		textSize(60);
		text("You is dead",300,260);
		textSize(30);
		text(deathMessage,300,340);
	}
}
