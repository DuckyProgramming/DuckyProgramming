projectile = function(x,y,type,team,direction,color,strokeColor,level,firedby,baseColor,baseStrokeColor){
	this.x = x;
	this.y = y;
	this.type = type;
	this.team = team;
	this.direction = direction;
	this.startDirection = this.direction;
	this.color = color;
	this.strokeColor = strokeColor;
	this.level = level;
	this.firedby = firedby;
	this.name = projectileTypes[this.type].name;
	this.damage = projectileTypes[this.type].damage;
	this.speed = projectileTypes[this.type].speed;
	this.startSpeed = this.speed;
	this.time = projectileTypes[this.type].time;
	this.size = projectileTypes[this.type].size;
	this.countingTime = 0;
	this.rate = random(0,360);
	this.fade = 15;
	this.remove = false;
	this.hit = false;
	this.fading = false;
	this.penetrating = false;
	this.damageBoost = 1;
	this.explosionSizeBoost = 1;
	this.calculator = 0;
	this.collided = false;
	if(this.firedby === 20){
		if(this.level === 0){
			projectiles.push(new projectile(this.x,this.y,0,this.team,this.direction-45,this.color,this.strokeColor));
			projectiles.push(new projectile(this.x,this.y,0,this.team,this.direction+45,this.color,this.strokeColor));
		}
		else{
			projectiles2.push(new projectile(this.x,this.y,0,this.team,this.direction-45,this.color,this.strokeColor));
			projectiles2.push(new projectile(this.x,this.y,0,this.team,this.direction+45,this.color,this.strokeColor));
		}
	}
	else if(this.firedby === 35){
		if(this.level === 0){
			projectiles.push(new projectile(this.x,this.y,0,this.team,this.direction-22.5,this.color,this.strokeColor));
			projectiles.push(new projectile(this.x,this.y,0,this.team,this.direction+22.5,this.color,this.strokeColor));
			projectiles.push(new projectile(this.x,this.y,0,this.team,this.direction-45,this.color,this.strokeColor));
			projectiles.push(new projectile(this.x,this.y,0,this.team,this.direction+45,this.color,this.strokeColor));
		}
		else{
			projectiles2.push(new projectile(this.x,this.y,0,this.team,this.direction-22.5,this.color,this.strokeColor));
			projectiles2.push(new projectile(this.x,this.y,0,this.team,this.direction+22.5,this.color,this.strokeColor));
			projectiles2.push(new projectile(this.x,this.y,0,this.team,this.direction-45,this.color,this.strokeColor));
			projectiles2.push(new projectile(this.x,this.y,0,this.team,this.direction+45,this.color,this.strokeColor));
		}
	}
	else if(this.firedby === 37){
		if(this.level === 0){
			projectiles.push(new projectile(this.x+cos(this.direction)*-6,this.y+sin(this.direction)*-6,0,this.team,this.direction-1,this.color,this.strokeColor));
			projectiles.push(new projectile(this.x+cos(this.direction)*-12,this.y+sin(this.direction)*-12,0,this.team,this.direction-2,this.color,this.strokeColor));
			projectiles.push(new projectile(this.x+cos(this.direction)*6,this.y+sin(this.direction)*6,0,this.team,this.direction+1,this.color,this.strokeColor));
			projectiles.push(new projectile(this.x+cos(this.direction)*12,this.y+sin(this.direction)*12,0,this.team,this.direction+2,this.color,this.strokeColor));
		}
		else{
			projectiles2.push(new projectile(this.x+cos(this.direction)*-6,this.y+sin(this.direction)*-6,0,this.team,this.direction-1,this.color,this.strokeColor));
			projectiles2.push(new projectile(this.x+cos(this.direction)*-12,this.y+sin(this.direction)*-12,0,this.team,this.direction-2,this.color,this.strokeColor));
			projectiles2.push(new projectile(this.x+cos(this.direction)*6,this.y+sin(this.direction)*6,0,this.team,this.direction+1,this.color,this.strokeColor));
			projectiles2.push(new projectile(this.x+cos(this.direction)*12,this.y+sin(this.direction)*12,0,this.team,this.direction+2,this.color,this.strokeColor));
		}
	}
	else if(this.firedby === 44){
		if(this.level === 0){
			projectiles.push(new projectile(this.x,this.y,2,this.team,this.direction+random(-3,3),this.color,this.strokeColor));
		}
		else{
			projectiles2.push(new projectile(this.x,this.y,2,this.team,this.direction+random(-3,3),this.color,this.strokeColor));
		}
	}
	else if(this.firedby === 51){
		if(this.level === 0){
			for(k=0;k<7;k++){
				projectiles.push(new projectile(this.x,this.y,0,this.team,this.direction+45+k*45,this.color,this.strokeColor));
			}
		}
		else{
			for(k=0;k<7;k++){
				projectiles2.push(new projectile(this.x,this.y,0,this.team,this.direction+45+k*45,this.color,this.strokeColor));
			}
		}
	}
	else if(this.firedby === 52){
		if(this.level === 0){
			for(k=0;k<5;k++){
				projectiles.push(new projectile(this.x,this.y,this.type,this.team,this.direction+60+k*60,this.color,this.strokeColor));
			}
		}
		else{
			for(k=0;k<5;k++){
				projectiles2.push(new projectile(this.x,this.y,this.type,this.team,this.direction+60+k*60,this.color,this.strokeColor));
			}
		}
	}
	else if(this.firedby === 61){
		if(this.level === 0){
			projectiles.push(new projectile(this.x,this.y,44,this.team,this.direction+180,this.color,this.strokeColor));
		}
		else{
			projectiles2.push(new projectile(this.x,this.y,44,this.team,this.direction+180,this.color,this.strokeColor));
		}
	}
	else if(this.firedby === 62){
		if(this.level === 0){
			projectiles.push(new projectile(this.x,this.y,0,this.team,this.direction+random(-3,3),this.color,this.strokeColor));
			projectiles.push(new projectile(this.x,this.y,2,this.team,this.direction+random(-3,3),this.color,this.strokeColor));
		}
		else{
			projectiles2.push(new projectile(this.x,this.y,0,this.team,this.direction+random(-3,3),this.color,this.strokeColor));
			projectiles2.push(new projectile(this.x,this.y,2,this.team,this.direction+random(-3,3),this.color,this.strokeColor));
		}
	}
	if(this.type === 3||this.type === 5||this.type === 6||this.type === 10||this.type === 21||this.type === 22||this.type === 37){
		this.size2 = 0.1;
		if(this.type === 5){
			this.direction-=45;
			if(this.level === 0){
				projectiles.push(new projectile(this.x,this.y,6,this.team,this.direction+90,this.color,this.strokeColor));
			}
			else{
				projectiles2.push(new projectile(this.x,this.y,6,this.team,this.direction+90,this.color,this.strokeColor));
			}
		}
	}
	else if(this.type === 7||this.type === 8||this.type === 34||this.type === 35){
		if(this.type === 34||this.type === 35){
			this.fade = 255;
			this.sizeAdd = random(0.3,0.4);
		}
		this.speed*=random(0.8,1.2);
		this.direction+=random(-15,15);
		if(this.type === 7||this.type === 34){
			for(j=0;j<5+(this.type-7)*3/27;j++){
				if(this.level === 0){
					projectiles.push(new projectile(this.x,this.y,this.type+1,this.team,this.direction,this.color,this.strokeColor));
				}
				else{
					projectiles2.push(new projectile(this.x,this.y,this.type+1,this.team,this.direction,this.color,this.strokeColor));
				}
			}
		}
	}
	else if(this.type === 9||this.type === 17||this.type === 19||this.type === 20||this.type === 23||this.type === 24||this.type === 28||this.type === 39||this.type === 40||this.type === 41||this.type === 44){
		if(this.type === 17||this.type === 39||this.type === 40||this.type === 41){
			this.target = -2;
		}
		else if(this.team === player.team){
			this.target = floor(random(0,ships.length));
		}
		else{
			this.target = floor(random(-1,ships.length));
		}
		this.targetDirection = this.direction;
		this.keyId = 0;
	}
	else if(this.type === 30){
		this.fade = 255;
		for(k=0;k<5;k++){
			particles2.push(new particle(this.x,this.y,1,this.direction,1,1,[60,60,60],[40,40,40]));
		}
	}
	else if(this.type === 32){
		this.fade = 255;
	}
	else if(this.type === 33||this.type === 36||this.type === 42){
		ships.push(new ship(this.x,this.y,(this.type/3)-1,this.team,this.direction,this.player,baseColor,baseStrokeColor,this.color,this.strokeColor));
	}
	if(this.type === 12||this.type === 13||this.type === 14||this.type === 15||this.type === 16||this.type === 19||this.type === 20||this.type === 21||this.type === 22||this.type === 24||this.type === 29){
		this.recoilBack = [0,0];
		this.recoilTimer = [0,0];
		if(this.type === 20||this.type === 24){
			this.fade = 15;
			if(this.type === 24){
				this.x+=sin(this.direction)*this.speed*5;
				this.y-=cos(this.direction)*this.speed*5;
			}
		}
	}
}
projectile.prototype.draw = function(){
	translate(this.x,this.y);
	rotate(this.direction);
	switch(this.type){
		case 0: case 1: case 2: case 7: case 8: case 11: case 18: case 30: case 31: case 34: case 35:
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			stroke(this.strokeColor[0],this.strokeColor[1],this.strokeColor[2],this.fade);
			strokeWeight(2);
			ellipse(0,0,this.size*2-1,this.size*2-1);
		break;
		case 3: case 21: case 22:
			scale(this.size2);
			rotate(this.rate-this.direction);
			if(this.type === 21){
				fill(120,this.fade);
				stroke(100,this.fade);
				strokeWeight(2);
				quad(-3,-18+this.recoilBack[0],3,-18+this.recoilBack[0],4,-12+this.recoilBack[0],-4,-12+this.recoilBack[0]);
				rect(-7,-12,14,4);
			}
			else if(this.type === 22){
				fill(120,this.fade);
				stroke(100,this.fade);
				strokeWeight(2);
				rect(-6,-15+this.recoilBack[0],12,3-this.recoilBack[0]);
				rect(-7,-18+this.recoilBack[0],14,3);
				rect(-7,-12,14,4);
			}
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			stroke(this.strokeColor[0],this.strokeColor[1],this.strokeColor[2],this.fade);
			strokeWeight(2);
			beginShape();
			for(i=0;i<4;i++){
				vertex(sin(i*90)*8,cos(i*90)*8);
				vertex(sin(i*90+45)*14,cos(i*90+45)*14);
			}
			endShape(CLOSE);
			rotate(-this.rate+this.direction);
			scale(1/this.size2);
		break;
		case 4:
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			stroke(this.strokeColor[0],this.strokeColor[1],this.strokeColor[2],this.fade);
			strokeWeight(2);
			triangle(-8,8,8,8,0,-13);
			rect(-6,8,12,2);
			fill(60);
			stroke(80);
			ellipse(0,1,6,6);
		break;
		case 5: case 6: case 37:
			scale(this.size2);
			rotate(this.rate-this.direction);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			stroke(this.strokeColor[0],this.strokeColor[1],this.strokeColor[2],this.fade);
			strokeWeight(2);
			beginShape();
			for(i=0;i<4;i++){
				vertex(sin(i*90)*6,cos(i*90)*6);
				vertex(sin(i*90+45)*11,cos(i*90+45)*11);
			}
			endShape(CLOSE);
			if(this.type === 37){
				fill(255,0,0);
				noStroke();
				ellipse(0,0,6,6);
			}
			rotate(-this.rate+this.direction);
			scale(1/this.size2);
		break;
		case 9: case 23: case 24: case 28: case 39: case 40: case 41: case 44:
			if(this.type === 24){
				fill(120,this.fade);
				stroke(100,this.fade);
				strokeWeight(4);
				quad(-7,10,7,10,3,17-this.recoilBack[0],-3,17-this.recoilBack[0]);
			}
			else{
				strokeWeight(2);
				if(this.type === 28){
					fill(120,this.fade);
					stroke(100,this.fade);
					quad(-5*this.size/5,3*this.size/5,-2*this.size/5,3*this.size/5,-4*this.size/5,6*this.size/5,-7*this.size/5,6*this.size/5);
					quad(5*this.size/5,3*this.size/5,2*this.size/5,3*this.size/5,4*this.size/5,6*this.size/5,7*this.size/5,6*this.size/5);
					if(this.target === -2){
						fill(60,this.fade);
						stroke(40,this.fade);
						ellipse(0,12,16,16);
					}
				}
				else if(this.type === 39){
					fill(230,this.fade);
					stroke(200,this.fade);
					ellipse(0,3*this.size/5,5,5);
				}
				else if(this.type === 40){
					fill(230,this.fade);
					stroke(200,this.fade);
					rect(-2,3*this.size/5,4,2);
				}
			}
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			stroke(this.strokeColor[0],this.strokeColor[1],this.strokeColor[2],this.fade);
			triangle(-5*this.size/5,3*this.size/5,5*this.size/5,3*this.size/5,0,-6*this.size/5);
		break;
		case 10:
			scale(this.size2);
			rotate(this.rate-this.direction);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			stroke(this.strokeColor[0],this.strokeColor[1],this.strokeColor[2],this.fade);
			strokeWeight(2);
			beginShape();
			for(i=0;i<3;i++){
				vertex(sin(i*120)*4,cos(i*120)*4);
				vertex(sin(i*120+60)*11,cos(i*120+60)*11);
			}
			endShape(CLOSE);
			rotate(-this.rate+this.direction);
			scale(1/this.size2);
		break;
		case 12: case 13: case 15:
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			stroke(this.strokeColor[0],this.strokeColor[1],this.strokeColor[2],this.fade);
			strokeWeight(2);
			if(this.type === 12||this.type === 13){
				rect(-9+this.type/2,5,18-this.type,5-this.recoilBack[0]);
			}
			else if(this.type === 15){
				quad(-2.5,4,2.5,4,4,7.5-this.recoilBack[0],-4,7.5-this.recoilBack[0]);
			}
			ellipse(0,0,this.size*2-1,this.size*2-1);
		break;
		case 14: case 16:
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			stroke(this.strokeColor[0],this.strokeColor[1],this.strokeColor[2],this.fade);
			strokeWeight(2);
			if(this.type === 16){
				quad(-5,-11+this.recoilBack[1],5,-11+this.recoilBack[1],3,-13+this.recoilBack[1],-3,-13+this.recoilBack[1]);
			}
			rect(-6,-11+this.recoilBack[1],12,5);
			rect(-3,7,6,5-this.recoilBack[0]);
			ellipse(0,0,this.size*2-1,this.size*2-1);
		break;
		case 17:
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			stroke(this.strokeColor[0],this.strokeColor[1],this.strokeColor[2],this.fade);
			strokeWeight(2);
			triangle(-12,7,12,7,0,-14);
		break;
		case 19:
			fill(120,this.fade);
			stroke(100,this.fade);
			strokeWeight(4);
			rect(-3,-10+this.recoilBack[0],6,8);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			stroke(this.strokeColor[0],this.strokeColor[1],this.strokeColor[2],this.fade);
			strokeWeight(2);
			ellipse(0,0,this.size*2-1,this.size*2-1);
		break;
		case 20:
			fill(120,this.fade);
			stroke(100,this.fade);
			strokeWeight(4);
			rect(-3,-9+this.recoilBack[0],6,7);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			stroke(this.strokeColor[0],this.strokeColor[1],this.strokeColor[2],this.fade);
			strokeWeight(2);
			ellipse(0,0,this.size*2-1,this.size*2-1);
		break;
		case 26: case 27:
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			stroke(this.strokeColor[0],this.strokeColor[1],this.strokeColor[2],this.fade);
			strokeWeight(2);
			ellipse(0,0,this.size*2-1,this.size*2-1);
			noStroke();
			if(this.type === 27){
				fill(255,140,0,this.fade);
			}
			else{
				fill(120,200,200,this.fade);
			}
			ellipse(0,0,6,6);
		break;
		case 29:
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			stroke(this.strokeColor[0],this.strokeColor[1],this.strokeColor[2],this.fade);
			strokeWeight(2);
			rotate(-45);
			rect(-3,5,6,5-this.recoilBack[0]);
			rotate(90);
			rect(-3,5,6,5-this.recoilBack[0]);
			rotate(-45);
			ellipse(0,0,this.size*2-1,this.size*2-1);
		break;
		case 32:
			fill(100,255,100,this.fade/4);
			stroke(150,255,150,this.fade);
			strokeWeight(2);
			ellipse(0,0,this.size*2-1,this.size*2-1);
		break;
		case 38:
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			stroke(this.strokeColor[0],this.strokeColor[1],this.strokeColor[2],this.fade);
			strokeWeight(2);
			ellipse(0,0,this.size*1.4-1,this.size*3-1);
		break;
	}
	rotate(-this.direction);
	translate(-this.x,-this.y);
}
projectile.prototype.update = function(){
	this.rate+=this.speed;
	this.countingTime++;
	if(this.direction>360){
		this.direction-=360;
	}
	else if(this.direction<0){
		this.direction+=360;
	}
	if(this.countingTime>this.time&&this.fade === 255){
		this.penetrating = true;
	}
	if(this.fading){
		this.fade-=85;
		if(this.fade<=0){
			this.remove = true;
		}
	}
	else if(this.penetrating){
		this.fade-=34;
		if(this.fade<=0){
			this.remove = true;
		}
	}
	else if(this.fade<255&&this.type !== 30&&this.type !== 32&&this.type !== 34&&this.type !== 35){
		this.fade = min(255,this.fade+34);
	}
	if(this.damage<=0){
		this.penetrating = true;
	}
	if(this.type === 3||this.type === 5||this.type === 6||this.type === 10||this.type === 21||this.type === 22||this.type === 37){
		this.speed*=0.98;
		if(this.size2<1){
			this.size2+=0.1;
		}
		if(this.type === 5&&!this.collided){
			this.direction+=this.speed*0.42;
		}
		else if(this.type === 6&&!this.collided){
			this.direction-=this.speed*0.42;
		}
		else if(this.type === 37&&!this.collided&&this.countingTime>120){
			for(var k in ships){
				if(dist(this.x,this.y,ships[k].x,ships[k].y)<10&&ships[k].team !== this.team){
					this.speed = 0;
				}
				else if(dist(this.x,this.y,ships[k].x,ships[k].y)<200&&ships[k].team !== this.team){
					this.direction = atan2(ships[k].x-this.x,this.y-ships[k].y);
					this.speed = (200-dist(this.x,this.y,ships[k].x,ships[k].y))/40;
				}
			}
			if(dist(this.x,this.y,player.x,player.y)<200&&dist(this.x,this.y,player.x,player.y)<10&&player.team !== this.team){
				this.speed = 0;
			}
			else if(dist(this.x,this.y,player.x,player.y)<200&&player.team !== this.team){
				this.direction = atan2(player.x-this.x,this.y-player.y);
				this.speed = (200-dist(this.x,this.y,player.x,player.y))/40;
			}
		}
		for(var k in projectiles){
			if(dist(this.x,this.y,projectiles[k].x,projectiles[k].y)<this.size+projectiles[k].size&&projectiles[k].team !== this.team){
				this.calculator = min(this.damage,projectiles[k].damage);
				this.damage-=this.calculator;
				projectiles[k].damage-=this.calculator;
			}
			else if(dist(this.x,this.y,projectiles[k].x,projectiles[k].y)<this.size+projectiles[k].size&&(projectiles[k].type === 3||projectiles[k].type === 5||projectiles[k].type === 6||projectiles[k].type === 10||projectiles[k].type === 21||projectiles[k].type === 22||projectiles[k].type === 37)&&(projectiles[k].x !== this.x||projectiles[k].y !== this.y)&&this.size2>=1){
				this.collided = true;
				this.speed = (this.speed+projectiles[k].speed)/4+0.2;
				projectiles[k].speed = this.speed+0.2;
				this.direction = atan2(this.x-projectiles[k].x,projectiles[k].y-this.y);
				projectiles[k].direction = this.direction+180;
				while(dist(this.x,this.y,projectiles[k].x,projectiles[k].y)<this.size+projectiles[k].size){
					this.x+=sin(this.direction)*this.speed;
					this.y-=cos(this.direction)*this.speed;
					projectiles[k].x+=sin(projectiles[k].direction)*projectiles[k].speed;
					projectiles[k].y-=cos(projectiles[k].direction)*projectiles[k].speed;
				}
			}
		}
		for(var k in projectiles2){
			if(dist(this.x,this.y,projectiles2[k].x,projectiles2[k].y)<this.size+projectiles2[k].size&&projectiles2[k].team !== this.team){
				this.calculator = min(this.damage,projectiles2[k].damage);
				this.damage-=this.calculator;
				projectiles2[k].damage-=this.calculator;
			}
			else if(dist(this.x,this.y,projectiles2[k].x,projectiles2[k].y)<this.size+projectiles2[k].size&&(projectiles2[k].type === 3||projectiles2[k].type === 5||projectiles2[k].type === 6||projectiles2[k].type === 10||projectiles2[k].type === 21||projectiles2[k].type === 22||projectiles2[k].type === 37)&&(projectiles2[k].x !== this.x||projectiles2[k].y !== this.y)&&this.size2>=1){
				this.collided = true;
				this.speed = (this.speed+projectiles2[k].speed)/4+0.2;
				projectiles2[k].speed = this.speed+0.2;
				this.direction = atan2(this.x-projectiles2[k].x,projectiles2[k].y-this.y);
				projectiles2[k].direction = this.direction+180;
				while(dist(this.x,this.y,projectiles2[k].x,projectiles2[k].y)<this.size+projectiles2[k].size){
					this.x+=sin(this.direction)*this.speed;
					this.y-=cos(this.direction)*this.speed;
					projectiles2[k].x+=sin(projectiles2[k].direction)*projectiles2[k].speed;
					projectiles2[k].y-=cos(projectiles2[k].direction)*projectiles2[k].speed;
				}
			}
		}
	}
	else if(this.type === 8){
		this.speed*=0.985;
	}
	else if(this.type === 9||this.type === 17||this.type === 19||this.type === 20||this.type === 23||this.type === 24||this.type === 28||this.type === 39||this.type === 40||this.type === 41||this.type === 44){
		if(this.type === 17||this.type === 41){
			if(this.target === -2){
				if(this.direction>this.targetDirection-180&&this.direction<this.targetDirection||this.direction>this.targetDirection+180&&this.direction<this.targetDirection+360||this.direction>this.targetDirection-540&&this.direction<this.targetDirection-360){
					this.direction+=3;
				}
				if(this.direction<this.targetDirection+180&&this.direction>this.targetDirection||this.direction<this.targetDirection+540&&this.direction>this.targetDirection+360||this.direction<this.targetDirection-180&&this.direction>this.targetDirection-360){
					this.direction-=3;
				}
				if(this.keyId === player.id&&this.countingTime%30 === 0){
					this.targetDirection = atan2(player.x+random(-100,100)-this.x,this.y-player.y+random(-100,100));
				}
				else if(this.countingTime%30 === 0){
					for(k in ships){
						if(this.keyId === ships[k].id){
							this.targetDirection = atan2(ships[k].x+random(-100,100)-this.x,this.y-ships[k].y+random(-100,100));
						}
					}
				}
				if(!this.player){
					if(dist(this.x,this.y,player.x,player.y)<300&&player.team !== this.team){
						this.target = -1;
					}
				}
				for(k=0;k<ships.length;k++){
					if(dist(this.x,this.y,ships[k].x,ships[k].y)<300&&ships[k].team !== this.team){
						this.target = k;
					}
				}
			}
			else if(this.target === -1){
				if(dist(this.x,this.y,player.x,player.y)>200){
					this.target = -2;
				}
			}
			else{
				if(ships.length>0&&dist(this.x,this.y,ships[this.target].x,ships[this.target].y)>300){
					this.target = -2;
				}
			}
		}
		else if(this.type === 28&&this.target === -2&&!this.hit){
			if(this.direction>this.targetDirection-180&&this.direction<this.targetDirection||this.direction>this.targetDirection+180&&this.direction<this.targetDirection+360||this.direction>this.targetDirection-540&&this.direction<this.targetDirection-360){
				this.direction+=3;
			}
			if(this.direction<this.targetDirection+180&&this.direction>this.targetDirection||this.direction<this.targetDirection+540&&this.direction>this.targetDirection+360||this.direction<this.targetDirection-180&&this.direction>this.targetDirection-360){
				this.direction-=3;
			}
			if(this.keyId === player.id){
				this.targetDirection = atan2(player.x-this.x,this.y-player.y);
				if(multiCircleHitDetect(this.x-player.x,this.y-player.y,player.hitBoxes,player.direction)&&player.life>0){
					player.life = min(player.life+10,player.maxLife);
					this.hit = true;
					this.fading = true;
				}
			}
			else{
				for(k in ships){
					if(this.keyId === ships[k].id){
						this.targetDirection = atan2(ships[k].x-this.x,this.y-ships[k].y);
						if(multiCircleHitDetect(this.x-ships[k].x,this.y-ships[k].y,ships[k].hitBoxes,ships[k].direction)&&ships[k].life>0){
							ships[k].life = min(ships[k].life+10,ships[k].maxLife);
							this.hit = true;
							this.fading = true;
						}
					}
				}
			}
		}
		else if(this.type === 39&&this.target === -2){
			if(abs(this.direction-this.targetDirection)<10){
				this.direction = this.targetDirection;
			}
			if(this.direction>this.targetDirection-180&&this.direction<this.targetDirection||this.direction>this.targetDirection+180&&this.direction<this.targetDirection+360||this.direction>this.targetDirection-540&&this.direction<this.targetDirection-360){
				this.direction+=10;
			}
			if(this.direction<this.targetDirection+180&&this.direction>this.targetDirection||this.direction<this.targetDirection+540&&this.direction>this.targetDirection+360||this.direction<this.targetDirection-180&&this.direction>this.targetDirection-360){
				this.direction-=10;
			}
			if(this.keyId === player.id){
				this.targetDirection = atan2(player.x-this.x+sin(this.countingTime*2.5+90+this.startDirection)*80,this.y-player.y-cos(this.countingTime*2.5+90+this.startDirection)*80);
			}
			else{
				for(k in ships){
					if(this.keyId === ships[k].id){
						this.targetDirection = atan2(ships[k].x+sin(this.countingTime*2.5+90+this.startDirection)*80-this.x,this.y-ships[k].y-cos(this.countingTime*2.5+90+this.startDirection)*80);
					}
				}
			}
			if(dist(this.x,this.y,player.x,player.y)<150&&player.team !== this.team){
				this.target = -1;
			}
			for(k in ships){
				if(dist(this.x,this.y,ships[k].x,ships[k].y)<150&&ships[k].team !== this.team){
					this.target = k;
				}
			}
		}
		else if(this.type === 40&&this.target === -2){
			if(abs(this.direction-this.targetDirection)<10){
				this.direction = this.targetDirection;
			}
			if(this.direction>this.targetDirection-180&&this.direction<this.targetDirection||this.direction>this.targetDirection+180&&this.direction<this.targetDirection+360||this.direction>this.targetDirection-540&&this.direction<this.targetDirection-360){
				this.direction+=10;
			}
			if(this.direction<this.targetDirection+180&&this.direction>this.targetDirection||this.direction<this.targetDirection+540&&this.direction>this.targetDirection+360||this.direction<this.targetDirection-180&&this.direction>this.targetDirection-360){
				this.direction-=10;
			}
			if(this.keyId === player.id){
				this.targetDirection = atan2(player.x-this.x+sin(this.countingTime*1.5+90+this.startDirection)*200,this.y-player.y-cos(this.countingTime*1.5+90+this.startDirection)*200);
			}
			else{
				for(k in ships){
					if(this.keyId === ships[k].id){
						this.targetDirection = atan2(ships[k].x+sin(this.countingTime*1.5+90+this.startDirection)*200-this.x,this.y-ships[k].y-cos(this.countingTime*1.5+90+this.startDirection)*200);
					}
				}
			}
			if(dist(this.x,this.y,player.x,player.y)<150&&player.team !== this.team){
				this.target = -1;
			}
			for(k in ships){
				if(dist(this.x,this.y,ships[k].x,ships[k].y)<150&&ships[k].team !== this.team){
					this.target = k;
				}
			}
		}
		if(this.team !== player.team||ships.length>0||this.type === 39){
			if(this.target === -1){
				this.targetDirection = atan2(player.x-this.x,this.y-player.y);
			}
			else if(this.target !== -2){
				this.targetDirection = atan2(ships[this.target].x-this.x,this.y-ships[this.target].y);
			}
			if(this.direction>this.targetDirection-180&&this.direction<this.targetDirection||this.direction>this.targetDirection+180&&this.direction<this.targetDirection+360||this.direction>this.targetDirection-540&&this.direction<this.targetDirection-360){
				this.direction+=3;
			}
			if(this.direction<this.targetDirection+180&&this.direction>this.targetDirection||this.direction<this.targetDirection+540&&this.direction>this.targetDirection+360||this.direction<this.targetDirection-180&&this.direction>this.targetDirection-360){
				this.direction-=3;
			}
		}
		for(var k in projectiles){
			if(dist(this.x,this.y,projectiles[k].x,projectiles[k].y)<this.size+projectiles[k].size&&projectiles[k].team !== this.team){
				this.calculator = min(this.damage,projectiles[k].damage);
				this.damage-=this.calculator;
				projectiles[k].damage-=this.calculator;
			}
		}
		for(k in projectiles2){
			if(dist(this.x,this.y,projectiles2[k].x,projectiles2[k].y)<this.size+projectiles2[k].size&&projectiles2[k].team !== this.team){
				this.calculator = min(this.damage,projectiles2[k].damage);
				this.damage-=this.calculator;
				projectiles2[k].damage-=this.calculator;
			}
		}
	}
	else if(this.type === 30||this.type === 32||this.type === 34||this.type === 35){
		if(this.type === 30){
			this.size+=1.5;
		}
		if(this.type === 34||this.type === 35){
			this.size+=this.sizeAdd;
			this.speed*=0.975;
		}
		this.fade-=5;
		for(var k in projectiles){
			if(dist(this.x,this.y,projectiles[k].x,projectiles[k].y)<this.size+projectiles[k].size&&projectiles[k].team !== this.team){
				this.calculator = min(this.damage,projectiles[k].damage);
				this.damage-=this.calculator;
				projectiles[k].damage-=this.calculator;
			}
		}
		if(this.fade<=0){
			this.remove = true;
		}
	}
	else if(this.type === 38){
		if(this.countingTime === 60){
			if(this.level === 0){
				for(var k=0;k<18;k++){
					projectiles.push(new projectile(this.x,this.y,0,this.team,this.direction+20+k*20,this.color,this.strokeColor));
				}
			}
			else{
				for(k=0;k<18;k++){
					projectiles2.push(new projectile(this.x,this.y,0,this.team,this.direction+20+k*20,this.color,this.strokeColor));
				}
			}
		}
	}
	if(this.type === 12||this.type === 13||this.type === 14||this.type === 15||this.type === 16||this.type === 19||this.type === 20||this.type === 21||this.type === 22||this.type === 24||this.type === 29){
		if(this.countingTime%10 === 0&&this.type === 12){
			this.recoilTimer[0] = 1;
			if(this.level === 0){
				projectiles.push(new projectile(this.x-sin(this.direction)*10,this.y+cos(this.direction)*10,2,this.team,this.direction+180,this.color,this.strokeColor,this.level));
			}
			else{
				projectiles2.push(new projectile(this.x-sin(this.direction)*10,this.y+cos(this.direction)*10,2,this.team,this.direction+180,this.color,this.strokeColor,this.level));
			}
		}
		else if(this.countingTime%20 === 0&&this.type === 13){
			this.recoilTimer[0] = 1;
			if(this.level === 0){
				projectiles.push(new projectile(this.x-sin(this.direction)*9,this.y+cos(this.direction)*9,2,this.team,this.direction+180,this.color,this.strokeColor,this.level));
			}
			else{
				projectiles2.push(new projectile(this.x-sin(this.direction)*9,this.y+cos(this.direction)*9,2,this.team,this.direction+180,this.color,this.strokeColor,this.level));
			}
		}
		else if(this.countingTime%5 === 0&&this.type === 15){
			this.recoilTimer[0] = 1;
			if(this.level === 0){
				projectiles.push(new projectile(this.x-sin(this.direction)*9,this.y+cos(this.direction)*9,2,this.team,this.direction+180+random(-30,30),this.color,this.strokeColor,this.level));
			}
			else{
				projectiles2.push(new projectile(this.x-sin(this.direction)*9,this.y+cos(this.direction)*9,2,this.team,this.direction+180+random(-30,30),this.color,this.strokeColor,this.level));
			}
		}
		else if(this.countingTime%10 === 0&&(this.type === 14||this.type === 16)){
			this.recoilTimer[0] = 1;
			if(this.level === 0){
				projectiles.push(new projectile(this.x-sin(this.direction)*11,this.y+cos(this.direction)*11,2,this.team,this.direction+180,this.color,this.strokeColor,this.level));
			}
			else{
				projectiles2.push(new projectile(this.x-sin(this.direction)*11,this.y+cos(this.direction)*11,2,this.team,this.direction+180,this.color,this.strokeColor,this.level));
			}
			if(this.countingTime%40 === 0){
				this.recoilTimer[1] = 2;
				if(this.level === 0){
					projectiles.push(new projectile(this.x+sin(this.direction)*13,this.y-cos(this.direction)*13,this.type-1,this.team,this.direction,this.color,this.strokeColor,this.level));
				}
				else{
					projectiles2.push(new projectile(this.x+sin(this.direction)*13,this.y-cos(this.direction)*13,this.type-1,this.team,this.direction,this.color,this.strokeColor,this.level));
				}
			}
		}
		else if(this.countingTime%25 === 0&&this.type === 19){
			this.recoilTimer[0] = 1;
			if(this.level === 0){
				projectiles.push(new projectile(this.x-sin(this.direction)*-10,this.y+cos(this.direction)*-10,2,this.team,this.direction,this.color,this.strokeColor,this.level));
			}
			else{
				projectiles2.push(new projectile(this.x-sin(this.direction)*-10,this.y+cos(this.direction)*-10,2,this.team,this.direction,this.color,this.strokeColor,this.level));
			}
		}
		else if(this.countingTime%30 === 0&&this.type === 20){
			this.recoilTimer[0] = 1;
			if(this.level === 0){
				projectiles.push(new projectile(this.x-sin(this.direction)*-9,this.y+cos(this.direction)*-9,2,this.team,this.direction,this.color,this.strokeColor,this.level));
			}
			else{
				projectiles2.push(new projectile(this.x-sin(this.direction)*-9,this.y+cos(this.direction)*-9,2,this.team,this.direction,this.color,this.strokeColor,this.level));
			}
		}
		else if(this.countingTime%135 === 0&&this.type === 21){
			this.recoilTimer[0] = 2;
			if(this.level === 0){
				projectiles.push(new projectile(this.x-sin(this.rate)*-20,this.y+cos(this.rate)*-20,23,this.team,this.rate,this.color,this.strokeColor,this.level));
			}
			else{
				projectiles2.push(new projectile(this.x-sin(this.rate)*-20,this.y+cos(this.rate)*-20,23,this.team,this.rate,this.color,this.strokeColor,this.level));
			}
		}
		else if(this.countingTime%135 === 0&&this.type === 22){
			this.recoilTimer[0] = 2;
			if(this.level === 0){
				projectiles.push(new projectile(this.x-sin(this.rate)*-20,this.y+cos(this.rate)*-20,20,this.team,this.rate,this.color,this.strokeColor,this.level));
			}
			else{
				projectiles2.push(new projectile(this.x-sin(this.rate)*-20,this.y+cos(this.rate)*-20,20,this.team,this.rate,this.color,this.strokeColor,this.level));
			}
		}
		else if(this.countingTime%60 === 0&&this.type === 24){
			this.recoilTimer[0] = 4;
			if(this.level === 0){
				projectiles.push(new projectile(this.x-sin(this.direction)*15,this.y+cos(this.direction)*15,9,this.team,this.direction+180,this.color,this.strokeColor,this.level));
			}
			else{
				projectiles2.push(new projectile(this.x-sin(this.direction)*15,this.y+cos(this.direction)*15,9,this.team,this.direction+180,this.color,this.strokeColor,this.level));
			}
		}
		else if(this.countingTime%10 === 0&&this.type === 29){
			this.recoilTimer[0] = 1;
			if(this.level === 0){
				projectiles.push(new projectile(this.x-sin(this.direction)*10,this.y+cos(this.direction)*10,2,this.team,this.direction+135,this.color,this.strokeColor,this.level));
				projectiles.push(new projectile(this.x-sin(this.direction)*10,this.y+cos(this.direction)*10,2,this.team,this.direction+225,this.color,this.strokeColor,this.level));
			}
			else{
				projectiles2.push(new projectile(this.x-sin(this.direction)*10,this.y+cos(this.direction)*10,2,this.team,this.direction+135,this.color,this.strokeColor,this.level));
				projectiles2.push(new projectile(this.x-sin(this.direction)*10,this.y+cos(this.direction)*10,2,this.team,this.direction+225,this.color,this.strokeColor,this.level));
			}
		}
		for(var k=0;k<this.recoilTimer.length;k++){
			if(this.recoilTimer[k]>0){
				this.recoilTimer[k]--;
				this.recoilBack[k]+=0.5;
			}
			if(this.recoilBack[k]>0){
				this.recoilBack[k]-=0.1;
			}
		}
	}
	this.x+=sin(this.direction)*this.speed;
	this.y-=cos(this.direction)*this.speed;
	if(frameCount%3 === 0&&!(this.type === 28&&this.target === -2)&&this.type !== 30&&this.type !== 32){
		for(var k in ships){
			if(multiCircleHitDetect(this.x-ships[k].x,this.y-ships[k].y,ships[k].hitBoxes,ships[k].direction)&&!this.hit&&this.team !== ships[k].team&&ships[k].life>0){
				if(this.type === 28){
					this.target = -2;
				}
				else{
					this.fading = true;
					this.hit = true;
				}
				ships[k].life-=this.damage*this.damageBoost;
				ships[k].lastDamage = this.name;
				if(this.type === 4){
					for(var l in ships){
						if(dist(this.x,this.y,ships[l].x,ships[l].y)<100){
							ships[l].life-=this.damage/50*(100-dist(this.x,this.y,ships[l].x,ships[l].y))*this.damageBoost;
							ships[l].lastDamage = this.name;
						}
					}
					if(dist(this.x,this.y,player.x,player.y)<100){
						player.life-=this.damage/50*(100-dist(this.x,this.y,player.x,player.y))*this.damageBoost;
						player.lastDamage = this.name;
					}
				}
				else if(this.type === 26){
					ships[k].initialActivation/=5;
				}
				else if(this.type === 27){
					if(ships[k].weapons.length>0){
						this.a = floor(random(0,ships[k].weapons.length));
						ships[k].weapons[this.a].reloadTimer+=300;
						ships[k].weapons[this.a].jamTimer+=300;
					}
					if(ships[k].lowerWeapons.length>0){
						this.a = floor(random(0,ships[k].lowerWeapons.length));
						ships[k].lowerWeapons[this.a].reloadTimer+=300;
						ships[k].lowerWeapons[this.a].jamTimer+=300;
					}
				}
				if(sqrt(this.damage*this.damageBoost)*10*this.explosionSizeBoost>0){
					particles.push(new particle(this.x,this.y,0,0,sqrt(this.damage*this.damageBoost)*10*this.explosionSizeBoost,1,[255,170,0],[255,85,0]));
				}
			}
		}
		if(multiCircleHitDetect(this.x-player.x,this.y-player.y,player.hitBoxes,player.direction)&&!this.hit&&this.team !== player.team&&player.life>0){
			if(this.type === 28){
				this.target = -2;
			}
			else{
				this.fading = true;
				this.hit = true;
			}
			player.life-=this.damage*this.damageBoost;
			player.lastDamage = this.name;
			if(this.type === 4){
				for(var l in ships){
					if(dist(this.x,this.y,ships[l].x,ships[l].y)<120){
						ships[l].life-=this.damage/60*(120-dist(this.x,this.y,ships[l].x,ships[l].y))*this.damageBoost;
						ships[l].lastDamage = this.name;
					}
				}
				if(dist(this.x,this.y,player.x,player.y)<120){
					player.life-=this.damage/60*(120-dist(this.x,this.y,player.x,player.y))*this.damageBoost;
					player.lastDamage = this.name;
				}
			}
			else if(this.type === 26){
				player.initialActivation/=5;
			}
			else if(this.type === 27){
				if(player.weapons.length>0){
					this.a = floor(random(0,player.weapons.length));
					player.weapons[this.a].reloadTimer+=300;
					player.weapons[this.a].jamTimer+=300;
				}
				if(player.lowerWeapons.length>0){
					this.a = floor(random(0,player.lowerWeapons.length));
					player.lowerWeapons[this.a].reloadTimer+=300;
					player.lowerWeapons[this.a].jamTimer+=300;
				}
			}
			if(sqrt(this.damage*this.damageBoost)*10*this.explosionSizeBoost>0){
				particles.push(new particle(this.x,this.y,0,0,sqrt(this.damage*this.damageBoost)*10*this.explosionSizeBoost,1,[255,170,0],[255,85,0]));
			}
		}
	}
}
