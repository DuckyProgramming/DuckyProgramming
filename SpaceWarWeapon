module = function(x,y,type,direction,player){
	this.x = x;
	this.y = y;
	this.type = type;
	this.direction = direction;
	this.player = player;
	this.name = moduleTypes[this.type].name;
	this.width = moduleTypes[this.type].width;
	this.height = moduleTypes[this.type].height;
	this.fade = 255;
	this.collapsing = false;
	if(this.direction%90 === 45){
		this.total = sqrt(this.width**2,this.height**2);
		this.width = this.total;
		this.height = this.total;
	}
	else if(this.direction%180 !== 0){
		this.width = this.height+this.width;
		this.height = this.width-this.height;
		this.width = this.width-this.height;
	}
}
module.prototype.draw = function(primaryFade,engineActivation,turningValue,color,strokeColor){
	translate(this.x,this.y);
	rotate(this.direction);
	switch(this.name){
		case "Thruster\nTiny":
			fill(255,200,0,(150+sin(frameCount*5)*30)*(min(255,this.fade)/255)*primaryFade);
			noStroke();
			triangle(-8.33,6,8.33,6,-turningValue*5/4,6+(sqrt(engineActivation)+sin(frameCount*5)/25)*20);
			fill(255,100,0,(150+sin(frameCount*5)*30)*(min(255,this.fade)/255)*primaryFade);
			triangle(-5,6,5,6,-turningValue*3/4,6+(sqrt(engineActivation)+sin(frameCount*5)/25)*12);
			fill(color[0],color[1],color[2],this.fade*primaryFade);
			stroke(strokeColor[0],strokeColor[1],strokeColor[2],this.fade*primaryFade);
			strokeWeight(4);
			quad(-7.5,-12.5,7.5,-12.5,11,5,-11,5);
		break;
		case "Thruster\nSmall":
			fill(255,200,0,(150+sin(frameCount*5)*30)*(min(255,this.fade)/255)*primaryFade);
			noStroke();
			triangle(-16.67,9,16.67,9,-turningValue*5/2,9+(sqrt(engineActivation)+sin(frameCount*5)/50)*30);
			fill(255,100,0,(150+sin(frameCount*5)*30)*(min(255,this.fade)/255)*primaryFade);
			triangle(-10,9,10,9,-turningValue*3/2,9+(sqrt(engineActivation)+sin(frameCount*5)/50)*18);
			fill(color[0],color[1],color[2],this.fade*primaryFade);
			stroke(strokeColor[0],strokeColor[1],strokeColor[2],this.fade*primaryFade);
			strokeWeight(4);
			quad(-15,-18.75,15,-18.75,22,7.5,-22,7.5);
		break;
		case "Thruster\nMedium":
			fill(255,200,0,(150+sin(frameCount*5)*30)*(min(255,this.fade)/255)*primaryFade);
			noStroke();
			triangle(-25,11,25,11,-turningValue*15/4,11+(sqrt(engineActivation)+sin(frameCount*5)/50)*40);
			fill(255,100,0,(150+sin(frameCount*5)*30)*(min(255,this.fade)/255)*primaryFade);
			triangle(-15,11,15,11,-turningValue*9/4,11+(sqrt(engineActivation)+sin(frameCount*5)/50)*24);
			fill(color[0],color[1],color[2],this.fade*primaryFade);
			stroke(strokeColor[0],strokeColor[1],strokeColor[2],this.fade*primaryFade);
			strokeWeight(4);
			quad(-22.5,-25,22.5,-25,33,10,-33,10);
		break;
		case "Thruster\nLarge":
			fill(255,200,0,(150+sin(frameCount*5)*30)*(min(255,this.fade)/255)*primaryFade);
			noStroke();
			triangle(-41.33,16,41.33,16,-turningValue*25/4,18+(sqrt(engineActivation)+sin(frameCount*5)/50)*60);
			fill(255,100,0,(150+sin(frameCount*5)*30)*(min(255,this.fade)/255)*primaryFade);
			triangle(-25,16,25,16,-turningValue*15/4,18+(sqrt(engineActivation)+sin(frameCount*5)/50)*36);
			fill(color[0],color[1],color[2],this.fade*primaryFade);
			stroke(strokeColor[0],strokeColor[1],strokeColor[2],this.fade*primaryFade);
			strokeWeight(4);
			quad(-37.5,-37.5,37.5,-37.5,55,15,-55,15);
		break;
		case "Thruster\nThick":
			fill(255,200,0,(150+sin(frameCount*5)*30)*(min(255,this.fade)/255)*primaryFade);
			noStroke();
			triangle(-82.66,16,82.66,16,-turningValue*25/2,18+(sqrt(engineActivation)+sin(frameCount*5)/50)*60);
			fill(255,100,0,(150+sin(frameCount*5)*30)*(min(255,this.fade)/255)*primaryFade);
			triangle(-50,16,50,16,-turningValue*15/2,18+(sqrt(engineActivation)+sin(frameCount*5)/50)*36);
			fill(color[0],color[1],color[2],this.fade*primaryFade);
			stroke(strokeColor[0],strokeColor[1],strokeColor[2],this.fade*primaryFade);
			strokeWeight(4);
			quad(-75,-37.5,75,-37.5,110,15,-110,15);
		break;
		case "Thruster\nExtended":
			fill(255,200,0,(150+sin(frameCount*5)*30)*(min(255,this.fade)/255)*primaryFade);
			noStroke();
			triangle(-16.67,18,16.67,18,-turningValue*5/2,18+(sqrt(engineActivation)+sin(frameCount*5)/50)*60);
			fill(255,100,0,(150+sin(frameCount*5)*30)*(min(255,this.fade)/255)*primaryFade);
			triangle(-10,18,10,18,-turningValue*3/2,18+(sqrt(engineActivation)+sin(frameCount*5)/50)*36);
			fill(color[0],color[1],color[2],this.fade*primaryFade);
			stroke(strokeColor[0],strokeColor[1],strokeColor[2],this.fade*primaryFade);
			strokeWeight(4);
			quad(-15,-37.5,15,-37.5,22,15,-22,15);
		break;
		case "Magazine":
			rotate(45);
			fill(200,150,0,this.fade*primaryFade);
			stroke(0,this.fade*primaryFade);
			strokeWeight(1);
			for(k=0;k<4;k++){
				rect(-5,-8+k*4,10,4);
			}
			rotate(-45);
		break;
		case "Ammo Belt":
			rotate(45);
			fill(180,130,0,this.fade*primaryFade);
			stroke(0,this.fade*primaryFade);
			strokeWeight(1);
			for(k=0;k<8;k++){
				for(l=0;l<2;l++){
					rect(-10+l*10,-16+k*4,10,4);
				}
			}
			rotate(-45);
		break;
	}
	rotate(-this.direction);
	translate(-this.x,-this.y);
}
module.prototype.drawSelect = function(){
	translate(this.x,this.y);
	rotate(this.direction);
	switch(this.name){
		case "Thruster\nTiny":
			quad(-7.5,-12.5,7.5,-12.5,11,5,-11,5);
		break;
		case "Thruster\nSmall":
			quad(-15,-18.75,15,-18.75,22,7.5,-22,7.5);
		break;
		case "Thruster\nMedium":
			quad(-22.5,-25,22.5,-25,33,10,-33,10);
		break;
		case "Thruster\nLarge":
			quad(-37.5,-37.5,37.5,-37.5,55,15,-55,15);
		break;
		case "Thruster\nThick":
			quad(-75,-37.5,75,-37.5,110,15,-110,15);
		break;
		case "Thruster\nExtended":
			quad(-15,-37.5,15,-37.5,22,15,-22,15);
		break;
		case "Magazine":
			rotate(45);
			rect(-5,-8+k*4,10,16);
			rotate(-45);
		break;
		case "Ammo Belt":
			rotate(45);
			rect(-10,-16,20,32);
			rotate(-45);
		break;
	}
	rotate(-this.direction);
	translate(-this.x,-this.y);
}
module.prototype.update = function(){
	if(this.collapsing){
		this.fade-=17;
	}
}
